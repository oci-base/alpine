name: release

on:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  VERSION: 3.17.3
  RELEASE: 3.17
  ACTIONS_RUNNER_DEBUG: true
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

permissions:
  contents: write
  packages: write

jobs:
  fetch:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Disabled s360x as was failing checksumming
        arch: ["aarch64", "armhf", "armv7", "ppc64le", "x86", "x86_64"]
    steps:
      - uses: suisei-cn/actions-download-file@v1.3.0
        id: archive  # Remember to give an ID if you need the output
        name: Download the file
        with:
          url: "https://dl-cdn.alpinelinux.org/alpine/v${{ env.RELEASE }}/releases/${{ matrix.arch }}/alpine-netboot-${{ env.VERSION }}-${{ matrix.arch }}.tar.gz"
          target: ./
          auto-match: false
      - uses: suisei-cn/actions-download-file@v1.3.0
        id: asc  # Remember to give an ID if you need the output
        name: Download the file
        with:
          url: "https://dl-cdn.alpinelinux.org/alpine/v${{ env.RELEASE }}/releases/${{ matrix.arch }}/alpine-netboot-${{ env.VERSION }}-${{ matrix.arch }}.tar.gz.asc"
          target: ./
          auto-match: false
      - name: Import Alpine Linux GPG key
        run: |
          curl https://alpinelinux.org/keys/ncopa.asc | gpg --import
      - name: Verify downloaded artifact
        run: |
          gpg --verify alpine-netboot-${{ env.VERSION }}-${{ matrix.arch }}.tar.gz.asc alpine-netboot-${{ env.VERSION }}-${{ matrix.arch }}.tar.gz
      - name: Rename to march registry arch naming
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          mv alpine-netboot-${{ env.VERSION }}-${{ matrix.arch }}.tar.gz \
               alpine-netboot-${{ env.VERSION }}-amd64.tar.gz

      - name: Rename to march registry arch naming
        if: ${{ matrix.arch == 'aarch64' }}
        run: |
          mv alpine-netboot-${{ env.VERSION }}-${{ matrix.arch }}.tar.gz \
               alpine-netboot-${{ env.VERSION }}-arm64v8.tar.gz
  manifest:
    needs: fetch
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout Buildah action
        uses: actions/checkout@v3
        with:
          repository: 'redhat-actions/buildah-build'
          path: "buildah-build"

      - name: Install latest buildah
        run: |
          bash buildah-build/.github/install_latest_buildah.sh
      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}

      - name: Create manifest
        run: |
          ARCHITECTURES="arm64v8 arm32v7 ppc64le i386 amd64"
          VERSION=$(cat version.txt | cut -d 'v' -f 2)
          RELEASE=$(echo "$VERSION" | cut -d '.' -f 1-2)
          MANIFEST=ghcr.io/oci-base/alpine

          buildah manifest create "$MANIFEST:v$VERSION"
          for arch in $(echo $ARCHITECTURES); do
            ctr=$(buildah from --arch "$arch" scratch)
            buildah add "$ctr" https://dl-cdn.alpinelinux.org/alpine/"$RELEASE/releases/$arch/alpine-netboot-$VERSION-$arch".tar.gz
            buildah commit --manifest "$MANIFEST:v$VERSION" "$ctr" "$MANIFEST:$VERSION-$arch"
          done

      - name: Push To GHCR
        run: |
          VERSION=$(cat version.txt | cut -d 'v' -f 2)
          MANIFEST=ghcr.io/oci-base/alpine
          buildah manifest push --all "$MANIFEST:v$VERSION" docker://"$MANIFEST:v$VERSION"
          echo "DIGEST=$(podman inspect --format='{{index .RepoDigests 0}}' $MANIFEST:v$VERSION)" >> "$GITHUB_ENV"
      - uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/oci-base/alpine:v${{ env.VERSION }}
          registry-username: ${{ env.REGISTRY_USER }}
          registry-password: ${{ env.REGISTRY_PASSWORD }}

  provenance:
    needs: [manifest]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.5.0
    with:
      image: ghcr.io/oci-base/alpine
      registry-username: ${{ github.actor }}
      digest: ${{ needs.manifest.outputs.DIGEST }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
